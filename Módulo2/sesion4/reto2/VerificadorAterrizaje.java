package M√≥dulo2.sesion4.reto2;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;
import java.util.Random;

public class VerificadorAterrizaje {

    private static final Random RANDOM = new Random();

    private static void dormir(int segundos) {
        try {
            TimeUnit.SECONDS.sleep(segundos);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            System.err.println("‚ùå Hilo de verificaci√≥n interrumpido.");
        }
    }

    /**
     * Se simula la verificaci√≥n de disponibilidad de la pista.
     * Probabilidad de √©xito: 80%
     * @return CompletableFuture que indica si la pista est√° disponible.
     */
    public CompletableFuture<Boolean> verificarPista() {
        return CompletableFuture.supplyAsync(() -> {
            System.out.println("üõ£Ô∏è Verificando disponibilidad de pista...");
            dormir(2 + RANDOM.nextInt(2)); // Latencia de 2 o 3 segundos
            boolean disponible = RANDOM.nextDouble() < 0.80; // 80% de probabilidad de ser true
            System.out.println("üõ£Ô∏è Pista disponible: " + disponible);
            return disponible;
        });
    }

    /**
     * Simula la verificaci√≥n del estado meteorol√≥gico.
     * Probabilidad de √©xito: 85%
     * @return CompletableFuture que indica si el clima es favorable.
     */
    public CompletableFuture<Boolean> verificarClima() {
        return CompletableFuture.supplyAsync(() -> {
            System.out.println("üå¶Ô∏è Verificando estado meteorol√≥gico...");
            dormir(2 + RANDOM.nextInt(2)); // Latencia de 2 o 3 segundos
            boolean favorable = RANDOM.nextDouble() < 0.85; // 85% de probabilidad de ser true
            System.out.println("üå¶Ô∏è Clima favorable: " + favorable);
            return favorable;
        });
    }

    /**
     * Simula la verificaci√≥n del estado del tr√°fico a√©reo cercano.
     * Probabilidad de √©xito: 90%
     * @return CompletableFuture que indica si el tr√°fico a√©reo est√° despejado.
     */
    public CompletableFuture<Boolean> verificarTraficoAereo() {
        return CompletableFuture.supplyAsync(() -> {
            System.out.println("üö¶ Verificando tr√°fico a√©reo cercano...");
            dormir(2 + RANDOM.nextInt(2)); // Latencia de 2 o 3 segundos
            boolean despejado = RANDOM.nextDouble() < 0.90; // 90% de probabilidad de ser true
            System.out.println("üö¶ Tr√°fico a√©reo despejado: " + despejado);
            return despejado;
        });
    }

    /**
     * Simula la verificaci√≥n de disponibilidad de personal en tierra.
     * Probabilidad de √©xito: 95%
     * @return CompletableFuture que indica si el personal est√° disponible.
     */
    public CompletableFuture<Boolean> verificarPersonalTierra() {
        return CompletableFuture.supplyAsync(() -> {
            System.out.println("üë∑‚Äç‚ôÇÔ∏è Verificando disponibilidad de personal en tierra...");
            dormir(2 + RANDOM.nextInt(2)); // Latencia de 2 o 3 segundos
            boolean disponible = RANDOM.nextDouble() < 0.95; // 95% de probabilidad de ser true
            System.out.println("üë∑‚Äç‚ôÇÔ∏è Personal disponible: " + disponible);
            return disponible;
        });
    }
}