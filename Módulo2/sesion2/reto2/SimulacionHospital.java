package M√≥dulo2.sesion2.reto2;
// src/SimulacionHospital.java
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class SimulacionHospital {

    public static void main(String[] args) {
        System.out.println("üè• Iniciando acceso a los recursos m√©dicos...");

        RecursoMedico salaCirugia = new RecursoMedico("Sala de cirug√≠a");

        Runnable draSanchezTask = () -> {
            String originalName = Thread.currentThread().getName(); 
            Thread.currentThread().setName("Dra. S√°nchez"); 
            salaCirugia.usar(Thread.currentThread().getName()); 
            Thread.currentThread().setName(originalName); 
        };
        Runnable drGomezTask = () -> {
            String originalName = Thread.currentThread().getName();
            Thread.currentThread().setName("Dr. G√≥mez");
            salaCirugia.usar(Thread.currentThread().getName());
            Thread.currentThread().setName(originalName);
        };
        Runnable enfermeraLauraTask = () -> {
            String originalName = Thread.currentThread().getName();
            Thread.currentThread().setName("Enfermera Laura");
            salaCirugia.usar(Thread.currentThread().getName());
            Thread.currentThread().setName(originalName);
        };
        Runnable drMartinezTask = () -> {
            String originalName = Thread.currentThread().getName();
            Thread.currentThread().setName("Dr. Mart√≠nez");
            salaCirugia.usar(Thread.currentThread().getName());
            Thread.currentThread().setName(originalName);
        };
        Runnable paramedicoJuanTask = () -> {
            String originalName = Thread.currentThread().getName();
            Thread.currentThread().setName("Param√©dico Juan");
            salaCirugia.usar(Thread.currentThread().getName());
            Thread.currentThread().setName(originalName);
        };


        ExecutorService executor = Executors.newFixedThreadPool(4);

        executor.submit(draSanchezTask);
        executor.submit(drGomezTask);
        executor.submit(enfermeraLauraTask);
        executor.submit(drMartinezTask);
        executor.submit(paramedicoJuanTask);

        executor.shutdown();

        try {
            if (!executor.awaitTermination(60, TimeUnit.SECONDS)) {
                System.err.println("‚ùå Las tareas no terminaron en el tiempo especificado.");
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            System.err.println("‚ùå La simulaci√≥n fue interrumpida mientras esperaba la terminaci√≥n.");
        }

        System.out.println("\n‚úÖ Simulaci√≥n de acceso a recursos cr√≠ticos finalizada.");
    }
}